'use strict';

QUnit.module('Тестируем функцию anagram', function () {
    QUnit.test('Функция работает правильно', function (assert) {
        const input = [
            'кот', 'пила', 'барокко',
            'стоп', 'ток', 'кошка',
            'липа', 'коробка', 'пост'
        ];

        const output = [
            ['барокко', 'коробка'],
            ['кот', 'ток'],
            ['липа', 'пила'],
            ['пост', 'стоп']
        ];

        assert.deepEqual(anagram(input), output, 'from [\n' +
            '            \'кот\', \'пила\', \'барокко\',\n' +
            '            \'стоп\', \'ток\', \'кошка\',\n' +
            '            \'липа\', \'коробка\', \'пост\'\n' +
            '        ] ' +
            'anagram ' +
            '            [\'барокко\', \'коробка\'],\n' +
            '            [\'кот\', \'ток\'],\n' +
            '            [\'липа\', \'пила\'],\n' +
            '            [\'пост\', \'стоп\']');
    });
    QUnit.test('Возвращает правильно отсортированные слова', function (assert) {
        const input = [
            'апорт', 'торг', 'тропа',
            'стоп', 'грот'
        ];

        const output = [
            ['апорт', 'тропа'],
            ['грот', 'торг']
        ];

        assert.deepEqual(anagram(input), output, 'from [\n' +
            '            \'апорт\', \'торг\', \'тропа\',\n' +
            '            \'стоп\', \'грот\'\n' +
            '        ] anagram            [\'апорт\', \'тропа\'],\n' +
            '            [\'грот\', \'торг\']');
    });
    QUnit.test('Функция работает правильно, когда нет анаграмм', function (assert) {
        const input = [
            'кот', 'пила', 'барокко',
            'стоп'
        ];

        const output = [];

        assert.deepEqual(anagram(input), output, 'from [\n' +
            '            \'кот\', \'пила\', \'барокко\',\n' +
            '            \'стоп\'\n' +
            '        ] anagram []');
    });
});